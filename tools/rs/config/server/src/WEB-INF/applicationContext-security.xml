<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">
      
	<!-- entry point per l'httpbasic per gestire il contenuto della response nel caso id utenza non autorizzata. -->
	<b:bean id="basicAuthenticationEntryPoint" class="org.openspcoop2.utils.jaxrs.impl.BasicAuthenticationEntryPoint" >
		<b:property name="realname" value="GovWay API Config"/>
	</b:bean>

	<!-- Password Encoder (in chiaro) -->
	<b:bean id ="passwordEncoder" class = "org.springframework.security.crypto.password.NoOpPasswordEncoder" factory-method = "getInstance" />

	<!-- Abilito gestione della sicurezza tramite annotazioni nel codice Java -->
	<global-method-security
		secured-annotations="enabled">
	</global-method-security>

	<!-- Definisco il sistema di autenticazione, nel nostro caso utilizziamo una sorgente degli utenti basata su file di proprietÃ  -->
        <authentication-manager alias="authenticationManager">
		<authentication-provider >
		    <password-encoder ref="passwordEncoder"/>
		    <user-service properties="classpath:rs-api-config.users.properties">
			<!--  <user name="user1"  password="123456"  authorities="ROLE_USER,ROLE1"  /> -->
			<!--  <user name="user2"  password="123456"  authorities="ROLE_USER,ROLE2" /> -->
		    </user-service>
		</authentication-provider>
	</authentication-manager>
	
	<!-- Configurazione della sicurezza su tutte le url esposte dall'applicazione
		create-session="stateless" sta ad indicare che non vogliamo nessuna sessione ed ogni richiesta dovra' essere autorizzata.

		use-expressions="false" sta ad indicare che non posso scrivere Expression per indicare le regole di accesso, ma solo ruoli
		L'attributo access deve quindi contenere ruoli.

		use-expressions="true" permette invece di usare le seguenti espressioni:
		hasRole([role])	Returns true if the current principal has the specified role.
		hasAnyRole([role1,role2])	Returns true if the current principal has any of the supplied roles (given as a comma-separated list of strings)
		principal	Allows direct access to the principal object representing the current user
		authentication	Allows direct access to the current Authentication object obtained from the SecurityContext
		permitAll	Always evaluates to true
		denyAll	Always evaluates to false
		isAnonymous()	Returns true if the current principal is an anonymous user
		isRememberMe()	Returns true if the current principal is a remember-me user
		isAuthenticated()	Returns true if the user is not anonymous
		isFullyAuthenticated()	Returns true if the user is not an anonymous or a remember-me user
	 -->
	<http auto-config="false" use-expressions="true" create-session="stateless">

		<csrf disabled="true"/>

		<!-- Le pagine per ottenere l'interfaccia e per provarla sono pubbliche -->
		<intercept-url pattern="/openapi.json" access="permitAll"/>
		<intercept-url pattern="/openapi.yaml" access="permitAll"/>
		<intercept-url pattern="/api-docs" access="permitAll"/>
		<!-- 
			Tutte le altre url dell'applicazione sono accessibili ad utenze che si devono essere autenticati
			Eventuali controlli di autorizzazione sono realizzati tramite le ACL
		 -->
		<intercept-url pattern="/**" access="isFullyAuthenticated()" />

		<!-- Entry point della configurazione, impostato per supportare l'autenticazione basic -->
		<http-basic entry-point-ref="basicAuthenticationEntryPoint" />
		
		<headers>
			<content-type-options disabled="true"/>
			<frame-options disabled="true"/>
			<xss-protection disabled="true"/>
	      	</headers>
	</http>
</b:beans>
